001.time模块

"""
    time模块
        与时间相关的功能
    在python中 时间分为3种
        1.时间戳  timestamp  从1970 1 月 1日 到先在的秒数  主要用于计算两个时间的差
        2.localtime  本地时间  表示的是计算机当前所在的位置
        3.UTC 世界协调时间
          时间戳 结构化 格式化字符
"""



import time

# 获取时间戳  返回浮点型
# print(time.time())  #打印秒数  1533802088.416651

# # 获取当地时间   返回的是结构化时间
# print(time.localtime())
# 打印time.struct_time(tm_year=2018, tm_mon=8, tm_mday=9, tm_hour=16, tm_min=8, tm_sec=46, tm_wday=3, tm_yday=221, tm_isdst=0)


# #  获取UTC时间 返回的还是结构化时间  比中国时间少8小时
# print(time.gmtime())
# 打印time.struct_time(tm_year=2018, tm_mon=8, tm_mday=9, tm_hour=8, tm_min=9, tm_sec=35, tm_wday=3, tm_yday=221, tm_isdst=0)


# # 将获取的时间转成我们期望的格式 仅支持结构化时间
# print(time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()))  #2018-08-09 16:10:07


# # 将格式化字符串的时间转为结构化时间  注意 格式必须匹配
# print(time.strptime("2018-08-09 09:01:22","%Y-%m-%d %H:%M:%S"))
# 打印time.struct_time(tm_year=2018, tm_mon=8, tm_mday=9, tm_hour=9, tm_min=1, tm_sec=22, tm_wday=3, tm_yday=221, tm_isdst=-1)


# # 时间戳 转结构化
# # print(time.localtime(10))  #1970年过10s
# print(time.localtime(time.time()))
#打印time.struct_time(tm_year=2018, tm_mon=8, tm_mday=9, tm_hour=16, tm_min=13, tm_sec=21, tm_wday=3, tm_yday=221, tm_isdst=0)


# # 结构化转 时间戳
# print(time.mktime(time.localtime()))   #1533802444.0


# # sleep 让当前进程睡眠一段时间 单位是秒
# # time.sleep(2)  #休眠2秒
# # print("over")


# # 不太常用的时间格式
# print(time.asctime())    #Thu Aug  9 09:10:18 2018
# print(time.ctime())    #Thu Aug  9 09:10:55 2018
# ================================/==============================================
# import time
# print(time.strftime('%Y-%m-%d %X'))  # 2018-08-29 20:11:57
# print(time.strftime('%Y-%m-%d %x'))  # 2018-08-29 08/29/18
# print(time.strftime('%x'))  # 08/29/18


# ================================/==============================================

002.datetime模块
"""
    datetime
        python实现的一个时间处理模块
    time 用起来不太方便  所以就有了datetme
    总结 datetime相比time 更灵活 更本土化

    timedelta表示时间差
        两个时间差可以 +-*/
        时间差和datetime 可以+-
"""


import datetime

# 获取时间 获取当前时间 并且返回的是格式化字符时间
# print(datetime.datetime.now())   #打印2018-08-09 16:22:12.184387


# 单独获取某个时间 年 月
# d = datetime.datetime.now()
# print(d)   #打印2018-08-09 16:25:36.106763
# print(d.year)   #2018
# print(d.day)  #9
#
# # 手动指定时间
# d2 = datetime.datetime(2018,8,9,9,50,00)
# print(d2)   #2018-08-09 09:50:00
#
# # 计算两个时间的差  只能- 不能加+
# print(d - d2)   # -1 day, 23:30:46.133658
#
# # 替换某个时间
# print(d.replace(year=2020))   #2020-08-09 16:25:00.461596
#
# # 表示时间差的模块 timedelta
# print(datetime.timedelta(days=1))   #1 day, 0:00:00
#
# t1 = datetime.timedelta(days=1)
# t2 = datetime.timedelta(weeks=1)
# print(t2 - t1)   #打印6 days, 0:00:00
# # 时间差可以和一个datetime进行加减
# print(d + t2)   #打印2018-08-16 16:27:38.905342

# ================================/==============================================

003.random模块
"""
    random 随机数相关模块
        random 0-1 开闭
        randint 0 - 3 开开
        randrange 0 - 3 开闭
        choice [1,2,32,3,2,"哈哈"] 随机选⼀个
        sample([1,"a",["c","d"]],2) 随机选指定个数
        uniform(1,3) 闭闭 浮点
        shuffle(列表) 打乱顺序
"""
import random
# # 0 - 1 随机浮点 不包含1
# print(random.random())   #0.20758871008104063
# print(random.randint(1,3))  #前开后开 2
# print(random.randrange(1,10))   #前开后闭合  9
# print(random.choice((1,2,3)))    #  1
# print(random.choices((1,2,3)))    #  [1]
# print(random.sample([1,2,3],2))    #[3,1],随机无序地选2个数放列表

# a=random.randrange(1,10)
# b=random.randrange(1,10)
# print('排%s 列%s'%(a,b))
#
# l = [1,2,3,4,5]
# print(random.shuffle(l))
# print(l)   #打乱列表顺序
#
#
# print(random.uniform(1,2)) #闭闭区间的浮点1.8644840642092588



# 生产验证码 整形和字符(全大写)随机组成  可以指定长度
# import random
#
# def make_code(i):
#     res = ""
#     for j in range(i):
# #         随机0到9
#         num = str(random.randint(0,9))   #数字不能直接拼接，必须先转换为字符，
#         c = chr(random.randint(65,90))
#         s = random.choice([num,c])
#         res += s
#     return res
# print(make_code(4))   #打印CR2B
